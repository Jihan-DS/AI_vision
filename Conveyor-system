import time
import serial
import requests
import numpy
from io import BytesIO
from pprint import pprint
import os
import spb.sdk
client = spb.sdk.Client(team_name = 'kdt2024_1-21', access_key = 'i785lgd7L83fXuMWk7fcWaNkE0Xsqrt43cgDzFWl',project_name = 'E-1_241105')
import cv2
ser = serial.Serial("/dev/ttyACM0", 9600)
# API endpoint
api_url = "https://suite-endpoint-api-apne2.superb-ai.com/endpoints/603adc4d-91cd-41f6-a55b-7e99c8c9bc24/inference"
def get_img():
    """Get Image From USB Camera
    Returns:
        numpy.array: Image numpy array
    """
    cam = cv2.VideoCapture(0)
    if not cam.isOpened():
        print("Camera Error")
        exit(-1)
    ret, img = cam.read()
    cam.release()
    return img
def crop_img(img, size_dict):
    x = size_dict["x"]
    y = size_dict["y"]
    w = size_dict["width"]
    h = size_dict["height"]
    img = img[y : y + h, x : x + w]
    return img
def inference_reqeust(img: numpy.array, api_rul: str):
    """_summary_
    Args:
        img (numpy.array): Image numpy array
        api_rul (str): API URL. Inference Endpoint
    """
    _, img_encoded = cv2.imencode(".jpg", img)
    # Prepare the image for sending
    img_bytes = BytesIO(img_encoded.tobytes())
    # Send the image to the API
    files = {"file": ("image.jpg", img_bytes, "image/jpeg")}
    print(files)
    try:
        response = requests.post(api_url, files=files)
        if response.status_code == 200:
            pprint(response.json())
            return response.json()
            print("Image sent successfully")
        else:
            print(f"Failed to send image. Status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error sending request: {e}")
cnt = 1
while 1:
    data = ser.read()
    print(data)
    if data == b"0":
        img = get_img()
        # crop_info = None
        crop_info = {"x": 265, "y": 170, "width": 220, "height": 220}
        if crop_info is not None:
            img = crop_img(img, crop_info)
        cv2.imshow("", img)
        cv2.waitKey(1)
        img_path = f'/home/rokey/team1_1107/dataset/test_defective{cnt}.jpg'
        cv2.imwrite(img_path, img)
        client.upload_image(path=img_path, dataset_name='sample')
        #test_true
        #test_defective
        #result = inference_reqeust(img, api_url)
        ser.write(b"1")
    else:
        pass
    cnt += 1
    if os.path.exists(img_path):
        os.remove(img_path)
    else:
        continue
